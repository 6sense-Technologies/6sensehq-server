upstream martin-prod {
  server martin-prod:3000;
}

# ── HTTP :80 for sami.6sensehq.com ─────────────────────────────────────────────
server {
    listen 80;
    server_name martin.6sensehq.com;

    # ACME challenge must map to the same webroot you mount in Docker
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        default_type "text/plain";
    }

    # While issuing certs, keep this simple (no redirect).
    # After cert is live, you can change this to 301 → https.
    location / {
        proxy_pass http://martin-prod;
        # return 301 https://$host$request_uri;
    }
}

# server {
#     listen 443 ssl http2;
#     server_name martin.6sensehq.com;

#     ssl_certificate /etc/letsencrypt/live/martin.6sensehq.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/martin.6sensehq.com/privkey.pem;

#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers HIGH:!aNULL:!MD5;
#     ssl_prefer_server_ciphers on;

#     location / {
#         proxy_pass         http://martin-prod;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_http_version 1.1;
#         proxy_request_buffering off;
#     }
# }

# docker run --rm   -v "$PWD/nginx/ssl:/etc/letsencrypt"   -v "$PWD/nginx/certbot-webroot:/var/www/certbot"   certbot/certbot certonly   --webroot -w /var/www/certbot   --email hello@6sensehq.com --agree-tos --no-eff-email   -d sami.6sensehq.com
# docker stop nginx
# docker rm nginx
# docker stop certbot
# docker rm certbot
# docker compose up -d